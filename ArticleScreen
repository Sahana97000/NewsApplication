import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  Image,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Button,
  Linking,
} from 'react-native';
import { RouteProp, useRoute, useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackList, Article } from '../App';
import AsyncStorage from '@react-native-async-storage/async-storage';
import Icon from 'react-native-vector-icons/Ionicons';

type ArticleRouteProp = RouteProp<RootStackList, 'Article'>;

export default function ArticleScreen() {
  const route = useRoute<ArticleRouteProp>();
  const navigation = useNavigation<NativeStackNavigationProp<RootStackList>>();
  const { article } = route.params;

  const [bookmarked, setBookmarked] = useState(false);

  useEffect(() => {
    checkIfBookmarked();
  }, []);

  const checkIfBookmarked = async () => {
    try {
      const stored = await AsyncStorage.getItem('bookmarkedArticles');
      const bookmarks = stored ? JSON.parse(stored) : [];
      const exists = bookmarks.some((a: Article) => a.url === article.url);
      setBookmarked(exists);
    } catch (error) {
      console.error('Error checking bookmark:', error);
    }
  };

  const toggleBookmark = async () => {
    try {
      const stored = await AsyncStorage.getItem('bookmarkedArticles');
      const bookmarks: Article[] = stored ? JSON.parse(stored) : [];

      let updated;
      if (bookmarked) {
        updated = bookmarks.filter((a) => a.url !== article.url);
      } else {
        updated = [...bookmarks, article];
      }

      await AsyncStorage.setItem('bookmarkedArticles', JSON.stringify(updated));
      setBookmarked(!bookmarked);
    } catch (error) {
      console.error('Error toggling bookmark:', error);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
        <Text style={styles.backText}>‚Üê Back</Text>
      </TouchableOpacity>

      {article.urlToImage && (
        <Image source={{ uri: article.urlToImage }} style={styles.image} />
      )}

      <View style={styles.rowBetween}>
        <Text style={styles.title}>{article.title}</Text>
        <TouchableOpacity onPress={toggleBookmark}>
          <Icon
            name={bookmarked ? 'bookmark' : 'bookmark-outline'}
            size={24}
            color={bookmarked ? '#E91E63' : '#6200EE'}
          />
        </TouchableOpacity>
      </View>

      <View style={styles.metaContainer}>
        <Text style={styles.author}>
          {article.author ? `By ${article.author}` : 'Unknown Author'}
        </Text>
        <Text style={styles.date}>
          {article.publishedAt
            ? new Date(article.publishedAt).toLocaleDateString('en-GB', {
                day: '2-digit',
                month: 'short',
                year: 'numeric',
              })
            : ''}
        </Text>
      </View>

      <View style={styles.descriptionBox}>
        <Text style={styles.description}>{article.description}</Text>
      </View>

      <Text style={styles.content}>{article.content}</Text>

      {article.url && (
        <Button title="Read Full Article" onPress={() => Linking.openURL(article.url!)} />
      )}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 16,
    backgroundColor: '#fff',
  },
  backButton: {
    marginBottom: 12,
  },
  backText: {
    color: '#6200EE',
    backgroundColor: '#f1f1f1',
    fontSize: 22,
    fontWeight: 'bold',
  },
  image: {
    width: '100%',
    height: 200,
    marginBottom: 12,
    borderRadius: 8,
  },
  rowBetween: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    flex: 1,
    marginRight: 10,
  },
  metaContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 6,
    marginBottom: 8,
  },
  author: {
    fontSize: 14,
    color: '#666',
    fontStyle: 'italic',
  },
  date: {
    fontSize: 14,
    color: '#666',
  },
  descriptionBox: {
    backgroundColor: '#f0f0ff',
    padding: 10,
    borderRadius: 8,
    marginBottom: 10,
  },
  description: {
    fontSize: 16,
    fontWeight: '500',
    color: '#333',
  },
  content: {
    fontSize: 14,
    lineHeight: 20,
    color: '#444',
    marginBottom: 16,
  },
});


